[{"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\index.js":"1","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\App.js":"2","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\reportWebVitals.js":"3","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\router\\RouterConfiguration.jsx":"4","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\pages\\SignUp.jsx":"5","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\pages\\SignIn.jsx":"6","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\FundooLogo.jsx":"7","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\CustomSnackBar.jsx":"8","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\service\\AxiosService.jsx":"9","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\pages\\ForgotPassword.jsx":"10","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\pages\\ResetPassword.jsx":"11","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Navbar.jsx":"12","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Sidebar.jsx":"13","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Note.jsx":"14","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Dashboard.jsx":"15","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\service\\NoteService.jsx":"16","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\DisplayNotes.jsx":"17","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Icon.jsx":"18","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\DisplayArchivedNotes.jsx":"19","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\DisplayTrashNotes.jsx":"20","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\service\\UserAxiosService.jsx":"21","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Label.jsx":"22","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\More.jsx":"23"},{"size":500,"mtime":499162500000,"results":"24","hashOfConfig":"25"},{"size":205,"mtime":1607921239070,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"25"},{"size":1656,"mtime":1609692738030,"results":"28","hashOfConfig":"25"},{"size":10948,"mtime":1609684380050,"results":"29","hashOfConfig":"25"},{"size":8396,"mtime":1609721179304,"results":"30","hashOfConfig":"25"},{"size":519,"mtime":1607923026516,"results":"31","hashOfConfig":"25"},{"size":757,"mtime":1609316510402,"results":"32","hashOfConfig":"25"},{"size":326,"mtime":1607986622746,"results":"33","hashOfConfig":"25"},{"size":3899,"mtime":1609684380050,"results":"34","hashOfConfig":"25"},{"size":6996,"mtime":1609684380050,"results":"35","hashOfConfig":"25"},{"size":2375,"mtime":1609716722454,"results":"36","hashOfConfig":"25"},{"size":11017,"mtime":1609829868060,"results":"37","hashOfConfig":"25"},{"size":4827,"mtime":1609222073922,"results":"38","hashOfConfig":"25"},{"size":761,"mtime":1609829569170,"results":"39","hashOfConfig":"25"},{"size":2591,"mtime":1609721709241,"results":"40","hashOfConfig":"25"},{"size":15069,"mtime":1609829687125,"results":"41","hashOfConfig":"25"},{"size":12064,"mtime":1609825306907,"results":"42","hashOfConfig":"25"},{"size":404,"mtime":1609829639026,"results":"43","hashOfConfig":"25"},{"size":398,"mtime":1609829633424,"results":"44","hashOfConfig":"25"},{"size":451,"mtime":1609684380081,"results":"45","hashOfConfig":"25"},{"size":375,"mtime":1609830060516,"results":"46","hashOfConfig":"25"},{"size":5682,"mtime":1609820135640,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1wulr55",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\index.js",[],["98","99"],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\App.js",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\reportWebVitals.js",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\router\\RouterConfiguration.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\pages\\SignUp.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\pages\\SignIn.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\FundooLogo.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\CustomSnackBar.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\service\\AxiosService.jsx",[],["100","101"],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\pages\\ForgotPassword.jsx",["102","103"],"import React, {Component} from 'react';\r\nimport '../scss/forgotPassword.scss';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport CustomSnackBar from '../component/CustomSnackBar'\r\nimport UserAxiosService from '../service/UserAxiosService';\r\nimport FundooLogo from \"../component/FundooLogo\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nclass ForgotPassword extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            email: '',\r\n            emailStatus: false,\r\n            emailError: ' ',\r\n            alertShow: false,\r\n            alertResponse: \"\",\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }, pattern, message) => {\r\n        this.setState({ [target.name]: target.value }, () => {\r\n            this.validation(target, pattern, message)\r\n        })\r\n    }\r\n\r\n    validation = (target, pattern, message) => {\r\n        this.setState({\r\n            [target.name + \"Status\"]: true,\r\n            [target.name + \"Error\"]: \"Required *\"\r\n        })\r\n        if (target.value.trim() !== '') {\r\n            if (target.value.match(pattern)) {\r\n                this.setState({\r\n                    [target.name + \"Status\"]: false,\r\n                    [target.name + \"Error\"]: \" \"\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    [target.name + \"Status\"]: true,\r\n                    [target.name + \"Error\"]: message\r\n                })\r\n            }\r\n        }\r\n    };\r\n\r\n    handleClick = () => {\r\n        const data = {\r\n            \"email\": this.state.email\r\n        }\r\n        new UserAxiosService().forgotPassword(data).then((response) => {\r\n            this.setState({\r\n                severity: \"success\",\r\n                alertShow: true,\r\n                alertResponse: response.data.message\r\n            })\r\n        })\r\n    }\r\n\r\n    closeAlertBox = () => {\r\n        this.setState({alertShow: false});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <CustomSnackBar alertShow={this.state.alertShow}\r\n                                severity={this.state.severity}\r\n                                alertResponse={this.state.alertResponse}\r\n                                closeAlertBox={this.closeAlertBox}/>\r\n                <div className=\"forgot-main-container\">\r\n                    <div className=\"text-container\">\r\n                        <FundooLogo/>\r\n                        <div className=\"page-title-container\">\r\n                            <div className=\"header\">Account Recovery</div>\r\n                            <div className=\"forgot-header\">\r\n                                <div className=\"forgot-line\">This helps to show that this account really belongs to you</div>\r\n                            </div>\r\n                            <div className=\"email-textfield\">\r\n                                <div className=\"email-text\">\r\n                                    <TextField id=\"outlined-basic\" size=\"small\" error={this.state.emailStatus} helperText={this.state.emailError} onChange={textEvent => this.handleChange(textEvent, \"^\\\\w+([\\\\.-]?\\\\w+)*@\\\\w+([\\\\.-]?\\\\w+)*(\\\\.\\\\w{2,3})+$\", \"Please enter valid email address\")} autoComplete=\"off\" required fullWidth label=\"Email\" variant=\"outlined\" name=\"email\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"button-container\">\r\n                        <div className=\"notification-line\">Fundoo will sent a notification to your email. Tap <b>Yes</b> to continue</div>\r\n                        <div className=\"yes-container\">\r\n                            <button className=\"yes-button\" onClick={this.handleClick}>Yes</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ForgotPassword;","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\pages\\ResetPassword.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Navbar.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Sidebar.jsx",["104"],"import React, {Component} from 'react';\r\nimport '../scss/sidebar.scss';\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport ArchiveIcon from '@material-ui/icons/Archive';\r\nimport ReminderIcon from '@material-ui/icons/Notifications';\r\nimport TrashIcon from '@material-ui/icons/Delete';\r\nimport NoteIcon from '@material-ui/icons/EmojiObjects';\r\nimport EditIcon from '@material-ui/icons/EditOutlined';\r\nimport {Link} from \"react-router-dom\";\r\nimport LabelOutlinedIcon from \"@material-ui/icons/LabelOutlined\";\r\nimport NoteService from \"../service/NoteService\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Label from \"./Label\";\r\nconst details = JSON.parse(localStorage.getItem(\"details\"));\r\n\r\nclass Sidebar extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            allLabels: [],\r\n            isLabel: false,\r\n            label: \"\",\r\n            Newlabel: \"\",\r\n        }\r\n    }\r\n\r\n    getAllLabels = () => {\r\n        NoteService.getNoteLabelList().then((response) => {\r\n            this.setState({\r\n                allLabels: response.data.data.details,\r\n            })\r\n        })\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getAllLabels();\r\n    }\r\n\r\n    handleEditLabel = () => {\r\n        console.log(\"Label called\")\r\n        this.setState({\r\n            isLabel: true\r\n        })\r\n    }\r\n\r\n    handleChange = async (e) => {\r\n        this.setState({ [e.target.name]: await e.target.value });\r\n    };\r\n\r\n    closeLabel = () => {\r\n        this.setState({\r\n            isLabel: false\r\n        })\r\n    };\r\n\r\n\r\n    postLabel = () => {\r\n        let data = {\r\n            label: this.state.label,\r\n            isDeleted: false,\r\n            userId: details.userId\r\n        };\r\n        NoteService.noteLabels(data).then((res) => {\r\n            this.setState({ label: \"\" });\r\n            this.componentWillMount();\r\n        });\r\n    };\r\n\r\n    deleteLabel = (id) => {\r\n        let data = {\r\n            id: id,\r\n        };\r\n        NoteService.deleteNoteLabels(data).then((response) => {\r\n            console.log(response);\r\n            this.componentWillMount();\r\n        });\r\n    };\r\n\r\n    editLabel = (id) => {\r\n        let data = {\r\n            label: this.state.Newlabel,\r\n            isDeleted: false,\r\n            userId: details.userId,\r\n            id: id,\r\n        };\r\n        NoteService.updateNoteLabels(data).then((response) => {\r\n            this.componentWillMount();\r\n        });\r\n    };\r\n\r\n    getLabelsByValue = (value) =>{\r\n        NoteService.getNotesListByLabels(value).then((response) => {\r\n            this.setState({\r\n                allNotes: response.data.data.data,\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <Drawer variant='persistent' open={this.props.openSidebar} >\r\n                <List>\r\n                    <Link to= \"/dashboard\">\r\n                        <ListItem button>\r\n                            <ListItemIcon><NoteIcon/></ListItemIcon>\r\n                            <ListItemText primary=\"Note\"/>\r\n                        </ListItem>\r\n                    </Link>\r\n\r\n                    <ListItem button >\r\n                        <ListItemIcon><ReminderIcon/></ListItemIcon>\r\n                        <ListItemText primary=\"Reminder\"/>\r\n                    </ListItem>\r\n\r\n                    <Divider/>\r\n                    <Link to=\"/label\">\r\n                        {this.state.allLabels.map((value, index) => {\r\n                            return (\r\n                                <>\r\n                                    {value !== null ? (\r\n                                        <ListItem\r\n                                            button\r\n                                            onClick={() => this.getLabelsByValue(value.label)}\r\n                                        >\r\n                                            <ListItemIcon>\r\n                                                <LabelOutlinedIcon />\r\n                                            </ListItemIcon>\r\n                                            <ListItemText primary={value.label} />\r\n                                        </ListItem>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </>\r\n                            );\r\n                        })}\r\n                    </Link>\r\n\r\n\r\n                        <ListItem button onClick={this.handleEditLabel}>\r\n                            <ListItemIcon><EditIcon/></ListItemIcon>\r\n                            <ListItemText primary=\"Edit Label\"/>\r\n                        </ListItem>\r\n\r\n                    <Divider/>\r\n                    <Link to= \"/archive\">\r\n                        <ListItem button >\r\n                            <ListItemIcon><ArchiveIcon/></ListItemIcon>\r\n                            <ListItemText primary=\"Archive\"/>\r\n                        </ListItem>\r\n                    </Link>\r\n\r\n                    <Link to=\"/trash\">\r\n                        <ListItem button>\r\n                            <ListItemIcon><TrashIcon/></ListItemIcon>\r\n                            <ListItemText primary=\"Trash\"/>\r\n                        </ListItem>\r\n                    </Link>\r\n\r\n                </List>\r\n            </Drawer>\r\n        <Dialog aria-labelledby=\"simple-dialog-title\" open={this.state.isLabel}>\r\n            <DialogTitle id=\"simple-dialog-title\">Edit label</DialogTitle>\r\n            <DialogTitle id=\"simple-dialog-title\" style={{ color: \"white\" }}>\r\n                <FormControl\r\n                    style={{\r\n                        width: \"100%\",\r\n                        marginTop: \"-15%\",\r\n                    }}\r\n                >\r\n                    <Input\r\n                        id=\"standard-adornment-password\"\r\n                        placeholder=\"Create New Label\"\r\n                        style={{ marginTop: \"4%\" ,marginBottom:\"14%\"}}\r\n                        value={this.state.label}\r\n                        name=\"label\"\r\n                        onChange={this.handleChange}\r\n                        startAdornment={\r\n                            <>\r\n                                <InputAdornment position=\"start\">\r\n                                    <IconButton aria-label=\"toggle password visibility\">\r\n                                        {\r\n                                            <CloseIcon\r\n                                                onClick={() => {\r\n                                                    this.setState({ label: \"\" });\r\n                                                }}\r\n                                            />\r\n                                        }\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            </>\r\n                        }\r\n                        endAdornment={\r\n                            <>\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton aria-label=\"toggle password visibility\">\r\n                                        {<CheckIcon onClick={this.postLabel} />}\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            </>\r\n                        }\r\n                    />\r\n                </FormControl>\r\n            </DialogTitle>\r\n            <DialogTitle id=\"simple-dialog-title\" style={{ color: \"white\" }}>\r\n                <FormControl\r\n                    style={{\r\n                        width: \"100%\",\r\n                        marginTop: \"-25%\",\r\n                    }}\r\n                >\r\n                    {this.state.allLabels.map((value, index) => {\r\n                        return (\r\n                            <>\r\n                                <Input\r\n                                    placeholder=\"Create New Label\"\r\n                                    type=\"text\"\r\n                                    style={{ marginTop: \"2%\" }}\r\n                                    defaultValue={value.label}\r\n                                    name=\"Newlabel\"\r\n                                    onChange={this.handleChange}\r\n                                    startAdornment={\r\n                                        <>\r\n                                            <InputAdornment position=\"start\">\r\n                                                <IconButton\r\n                                                >\r\n                                                    <DeleteIcon\r\n                                                        onClick={() => this.deleteLabel(value.id)}\r\n                                                    ></DeleteIcon>\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        </>\r\n                                    }\r\n                                    endAdornment={\r\n                                        <>\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton aria-label=\"toggle password visibility\">\r\n                                                    {\r\n                                                        <EditIcon\r\n                                                            onClick={() => this.editLabel(value.id)}\r\n                                                        />\r\n                                                    }\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        </>\r\n                                    }\r\n                                />\r\n                            </>\r\n                        );\r\n                    })}\r\n                </FormControl>\r\n            </DialogTitle>\r\n            <Button variant=\"outlined\" color=\"primary\" style={{ color: \"black\" }}\r\n                    onClick={this.closeLabel}\r\n            >\r\n                Close\r\n            </Button>\r\n        </Dialog>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sidebar;","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Note.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Dashboard.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\service\\NoteService.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\DisplayNotes.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Icon.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\DisplayArchivedNotes.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\DisplayTrashNotes.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\service\\UserAxiosService.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Label.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\More.jsx",[],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"105","replacedBy":"109"},{"ruleId":"107","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":3,"column":8,"nodeType":"113","messageId":"114","endLine":3,"endColumn":14},{"ruleId":"111","severity":1,"message":"115","line":4,"column":8,"nodeType":"113","messageId":"114","endLine":4,"endColumn":12},{"ruleId":"111","severity":1,"message":"116","line":27,"column":8,"nodeType":"113","messageId":"114","endLine":27,"endColumn":13},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],["117"],["118"],"no-unused-vars","'Avatar' is defined but never used.","Identifier","unusedVar","'Chip' is defined but never used.","'Label' is defined but never used.","no-global-assign","no-unsafe-negation"]