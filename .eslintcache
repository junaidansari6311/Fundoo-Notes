[{"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\index.js":"1","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\App.js":"2","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\reportWebVitals.js":"3","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\router\\RouterConfiguration.jsx":"4","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\pages\\SignUp.jsx":"5","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\pages\\SignIn.jsx":"6","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\FundooLogo.jsx":"7","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\CustomSnackBar.jsx":"8","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\service\\AxiosService.jsx":"9","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\pages\\ForgotPassword.jsx":"10","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\pages\\ResetPassword.jsx":"11","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Navbar.jsx":"12","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Sidebar.jsx":"13","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Note.jsx":"14","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Dashboard.jsx":"15","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\service\\NoteService.jsx":"16","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\DisplayNotes.jsx":"17","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Icon.jsx":"18","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\DisplayArchivedNotes.jsx":"19","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\DisplayTrashNotes.jsx":"20","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\service\\UserAxiosService.jsx":"21","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Label.jsx":"22"},{"size":500,"mtime":499162500000,"results":"23","hashOfConfig":"24"},{"size":205,"mtime":1607921239070,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"26","hashOfConfig":"24"},{"size":1656,"mtime":1609692738030,"results":"27","hashOfConfig":"24"},{"size":10948,"mtime":1609684380050,"results":"28","hashOfConfig":"24"},{"size":8396,"mtime":1609721179304,"results":"29","hashOfConfig":"24"},{"size":519,"mtime":1607923026516,"results":"30","hashOfConfig":"24"},{"size":757,"mtime":1609316510402,"results":"31","hashOfConfig":"24"},{"size":326,"mtime":1607986622746,"results":"32","hashOfConfig":"24"},{"size":3899,"mtime":1609684380050,"results":"33","hashOfConfig":"24"},{"size":6996,"mtime":1609684380050,"results":"34","hashOfConfig":"24"},{"size":2375,"mtime":1609716722454,"results":"35","hashOfConfig":"24"},{"size":10840,"mtime":1609739253518,"results":"36","hashOfConfig":"24"},{"size":4827,"mtime":1609222073922,"results":"37","hashOfConfig":"24"},{"size":791,"mtime":1609733185870,"results":"38","hashOfConfig":"24"},{"size":2591,"mtime":1609721709241,"results":"39","hashOfConfig":"24"},{"size":12470,"mtime":1609684380034,"results":"40","hashOfConfig":"24"},{"size":6465,"mtime":1609740127464,"results":"41","hashOfConfig":"24"},{"size":404,"mtime":1609346058070,"results":"42","hashOfConfig":"24"},{"size":398,"mtime":1609345535322,"results":"43","hashOfConfig":"24"},{"size":451,"mtime":1609684380081,"results":"44","hashOfConfig":"24"},{"size":8564,"mtime":1609732402997,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1wulr55",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\index.js",[],["93","94"],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\App.js",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\reportWebVitals.js",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\router\\RouterConfiguration.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\pages\\SignUp.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\pages\\SignIn.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\FundooLogo.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\CustomSnackBar.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\service\\AxiosService.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\pages\\ForgotPassword.jsx",["95","96"],"import React, {Component} from 'react';\r\nimport '../scss/forgotPassword.scss';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport CustomSnackBar from '../component/CustomSnackBar'\r\nimport UserAxiosService from '../service/UserAxiosService';\r\nimport FundooLogo from \"../component/FundooLogo\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nclass ForgotPassword extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            email: '',\r\n            emailStatus: false,\r\n            emailError: ' ',\r\n            alertShow: false,\r\n            alertResponse: \"\",\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }, pattern, message) => {\r\n        this.setState({ [target.name]: target.value }, () => {\r\n            this.validation(target, pattern, message)\r\n        })\r\n    }\r\n\r\n    validation = (target, pattern, message) => {\r\n        this.setState({\r\n            [target.name + \"Status\"]: true,\r\n            [target.name + \"Error\"]: \"Required *\"\r\n        })\r\n        if (target.value.trim() !== '') {\r\n            if (target.value.match(pattern)) {\r\n                this.setState({\r\n                    [target.name + \"Status\"]: false,\r\n                    [target.name + \"Error\"]: \" \"\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    [target.name + \"Status\"]: true,\r\n                    [target.name + \"Error\"]: message\r\n                })\r\n            }\r\n        }\r\n    };\r\n\r\n    handleClick = () => {\r\n        const data = {\r\n            \"email\": this.state.email\r\n        }\r\n        new UserAxiosService().forgotPassword(data).then((response) => {\r\n            this.setState({\r\n                severity: \"success\",\r\n                alertShow: true,\r\n                alertResponse: response.data.message\r\n            })\r\n        })\r\n    }\r\n\r\n    closeAlertBox = () => {\r\n        this.setState({alertShow: false});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <CustomSnackBar alertShow={this.state.alertShow}\r\n                                severity={this.state.severity}\r\n                                alertResponse={this.state.alertResponse}\r\n                                closeAlertBox={this.closeAlertBox}/>\r\n                <div className=\"forgot-main-container\">\r\n                    <div className=\"text-container\">\r\n                        <FundooLogo/>\r\n                        <div className=\"page-title-container\">\r\n                            <div className=\"header\">Account Recovery</div>\r\n                            <div className=\"forgot-header\">\r\n                                <div className=\"forgot-line\">This helps to show that this account really belongs to you</div>\r\n                            </div>\r\n                            <div className=\"email-textfield\">\r\n                                <div className=\"email-text\">\r\n                                    <TextField id=\"outlined-basic\" size=\"small\" error={this.state.emailStatus} helperText={this.state.emailError} onChange={textEvent => this.handleChange(textEvent, \"^\\\\w+([\\\\.-]?\\\\w+)*@\\\\w+([\\\\.-]?\\\\w+)*(\\\\.\\\\w{2,3})+$\", \"Please enter valid email address\")} autoComplete=\"off\" required fullWidth label=\"Email\" variant=\"outlined\" name=\"email\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"button-container\">\r\n                        <div className=\"notification-line\">Fundoo will sent a notification to your email. Tap <b>Yes</b> to continue</div>\r\n                        <div className=\"yes-container\">\r\n                            <button className=\"yes-button\" onClick={this.handleClick}>Yes</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ForgotPassword;","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\pages\\ResetPassword.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Navbar.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Sidebar.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Note.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Dashboard.jsx",["97"],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\service\\NoteService.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\DisplayNotes.jsx",["98"],"import React, {Component} from 'react';\r\nimport '../scss/displayNotes.scss';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport NoteService from \"../service/NoteService\";\r\nimport Icon from \"./Icon\";\r\nimport CustomSnackBar from \"./CustomSnackBar\";\r\nimport Pin from \"../assets/Pin.svg\";\r\nimport Unpin from \"../assets/Unpin.svg\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\r\nimport RestoreFromTrashOutlinedIcon from '@material-ui/icons/RestoreFromTrashOutlined';\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\n\r\nclass DisplayNotes extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isVisible: false,\r\n            isDialogVisible: false,\r\n            index: '',\r\n            id: '',\r\n            title: '',\r\n            description: '',\r\n            noteDetails: [],\r\n            /*userDetails: [],*/\r\n            color: '',\r\n            severity: \"success\",\r\n            alertShow: false,\r\n            alertResponse: \"\",\r\n            pinned: false,\r\n            collab: []\r\n        }\r\n        var userDetails = {};\r\n    }\r\n\r\n    getNotes = () => {\r\n        NoteService.getAllNotes().then((response) => {\r\n            this.setState({\r\n                noteDetails: response.data.data.data.reverse(),\r\n                /*userDetails: response.data.data.data[0].user*/\r\n            })\r\n            var userDetails = response.data.data.data[0].user;\r\n            console.log(\"userrrrrrrrrr\",userDetails)\r\n            console.log(\"usereeeeee\",response.data.data.data)\r\n            console.log(\"kaksfkj\",this.state.collab)\r\n        })\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getNotes();\r\n    }\r\n\r\n    handleVisible = (index) => {\r\n        this.setState({index: index})\r\n    }\r\n\r\n    handleClose = () => {\r\n        const data = {\r\n            noteId: this.state.id,\r\n            title: this.state.title,\r\n            description: this.state.description\r\n        }\r\n        NoteService.updateNote(data).then((response) => {\r\n            console.log(response)\r\n        })\r\n        this.setState({isDialogVisible: false});\r\n        this.componentWillMount();\r\n    }\r\n\r\n    handleTitleChange = async (e) => {\r\n        this.setState({ title: await e.target.value })\r\n    }\r\n\r\n    handleDescriptionChange = async (e) => {\r\n        this.setState({ description: await e.target.value })\r\n    }\r\n\r\n    handleUpdate = (id, title, description,color,collaborators) => {\r\n        this.setState({\r\n            isDialogVisible: true ,\r\n            id: id,title: title,\r\n            description: description,\r\n            color: color,\r\n            collab: collaborators\r\n        })\r\n    }\r\n\r\n    setColor = (color, id) => {\r\n        this.setState({color: color})\r\n        const data = {\r\n            color: color,\r\n            noteIdList: [id]\r\n        }\r\n        NoteService.changeNoteColor(data).then((response) => {\r\n            this.setState({\r\n                severity: \"success\",\r\n                alertShow: true,\r\n                alertResponse: \"Note Color Changed\" });\r\n        })\r\n        this.componentWillMount();\r\n    }\r\n\r\n    pinNote = (id) => {\r\n        this.setState({\r\n            pinned: true\r\n        });\r\n        let data = {\r\n            noteIdList: [id],\r\n            isPined: true,\r\n        };\r\n        NoteService.pinUnpinNotes(data).then((response) => {\r\n            this.setState({\r\n                severity: \"success\",\r\n                alertShow: true,\r\n                alertResponse: \"Note Pined\" });\r\n        });\r\n        this.componentWillMount();\r\n    }\r\n\r\n    unPinNote = (id) => {\r\n        this.setState({\r\n            pinned : false\r\n        });\r\n        let data = {\r\n            noteIdList: [id],\r\n            isPined: false,\r\n        };\r\n        NoteService.pinUnpinNotes(data).then((response) => {\r\n            this.setState({\r\n                severity: \"success\",\r\n                alertShow: true,\r\n                alertResponse: \"Note Unpined\"});\r\n        });\r\n        this.componentWillMount();\r\n    }\r\n\r\n    handleDeleteForever = (id) => {\r\n        let data = {\r\n            noteIdList: [id],\r\n            isDeleted: true,\r\n        };\r\n        NoteService.deleteNotesForever(data).then((response) => {\r\n            this.setState({\r\n                severity: \"success\",\r\n                alertShow: true,\r\n                alertResponse: \"Note Deleted Forever\"});\r\n        });\r\n        this.componentWillMount();\r\n    }\r\n\r\n    handleRestore = (id) => {\r\n        console.log(id);\r\n        let data = {\r\n            noteIdList: [id],\r\n            isDeleted: false,\r\n        };\r\n        NoteService.restoreTrashNotes(data).then((res) => {\r\n            this.setState({\r\n                severity: \"success\",\r\n                alertShow: true,\r\n                alertResponse: \"Note Restored\"});\r\n        });\r\n        this.componentWillMount();\r\n    }\r\n\r\n    closeAlertBox = () => {\r\n        this.setState({ alertShow: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"flex-container\">\r\n                <CustomSnackBar alertShow={this.state.alertShow}\r\n                                severity={this.state.severity}\r\n                                alertResponse={this.state.alertResponse}\r\n                                closeAlertBox={this.closeAlertBox} />\r\n                {this.state.noteDetails.map((note,index)=> {\r\n                    return (\r\n                        <>\r\n                        {note.isArchived === this.props.archived && note.isPined === this.props.pin\r\n                        && note.isDeleted === this.props.deleted ? (\r\n                            <div key={note.id} className=\"flex-container-main\">\r\n                                <div className=\"card-container\"\r\n                                     onMouseOver={() => this.handleVisible(index)}\r\n                                     onMouseOut={() => this.handleVisible('')}\r\n                                     onClick={() => this.setState({ id: note.id })}\r\n                                     style={{backgroundColor: note.color}}\r\n                                >\r\n                                    <div className=\"card-pin-title\">\r\n                                        <div className=\"card-title\">\r\n                                            <div onClick={() => this.handleUpdate(note.id, note.title, note.description, note.color,note.collaborators)}>{note.title}</div>\r\n                                        </div>\r\n                                        <div className=\"card-pin-unPin\" style={index === this.state.index ? {visibility: 'visible'} : {visibility: 'hidden'}}>\r\n                                            {note.isPined  === false ?\r\n                                                <IconButton onClick={() => this.pinNote(note.id)}>\r\n                                                    <img src={Pin} alt=\"Pin icon\"/>\r\n                                                </IconButton>\r\n                                                :\r\n                                                <IconButton onClick={() => this.unPinNote(note.id) }>\r\n                                                    <img src={Unpin} alt=\"Pin icon\"/>\r\n                                                </IconButton>\r\n                                            }\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                    <div className=\"card-note\">\r\n                                        <div onClick={() => this.handleUpdate(note.id, note.title, note.description, note.color,note.collaborators)}>{note.description}</div>\r\n                                    </div>\r\n\r\n                                    <div style={{ marginTop: \"0%\" }}>\r\n                                        {note.collaborators[0] != null &&\r\n                                        this.props.deleted === false ? (\r\n                                            <>\r\n                                                {note.collaborators.map((value, index) => {\r\n                                                    return (\r\n                                                        <Chip\r\n                                                            label={value.firstName.slice(0, 1)}\r\n                                                            style={{\r\n                                                                marginLeft: \"6%\",\r\n                                                                backgroundColor: \"gray\",\r\n                                                                fontWeight: \"bold\",\r\n                                                            }}\r\n                                                        />\r\n                                                    );\r\n                                                })}\r\n                                            </>\r\n                                        ) : (\r\n                                            \"\"\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"card-icon-container\"\r\n                                         style={index === this.state.index ? {visibility: 'visible'} : {visibility: 'hidden'}}>\r\n                                        <div className=\"card-icon\">\r\n                                            {note.isDeleted === false ?\r\n                                                <Icon setColor={this.setColor} noteId={this.state.id} archived={this.props.archived}\r\n                                                      update={this.getNotes}\r\n                                                      collab={note.collaborators} cardId={note.id}\r\n                                                />\r\n                                                :\r\n                                                <div className=\"delete-card-icon\">\r\n                                                    <IconButton>\r\n                                                        <DeleteOutlinedIcon onClick={() => this.handleDeleteForever(note.id)}></DeleteOutlinedIcon>\r\n                                                    </IconButton>\r\n                                                    <IconButton >\r\n                                                        <RestoreFromTrashOutlinedIcon onClick={() => this.handleRestore(note.id)}></RestoreFromTrashOutlinedIcon>\r\n                                                    </IconButton>\r\n                                                </div>\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ) : (\"\")\r\n                        }\r\n                        </>\r\n                        )\r\n                        }\r\n                )}\r\n                <Dialog className=\"dialog-box\" open={this.state.isDialogVisible} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\" >\r\n                    <DialogContent className=\"dialog-content\" >\r\n                        <div className=\"dialog-container\" style={{backgroundColor : this.state.color}}>\r\n                            <div className=\"dialog-pin-title\">\r\n                                <div className=\"dialog-title\">\r\n                                    <InputBase\r\n                                        placeholder=\"Title\"\r\n                                        onChange={this.handleTitleChange}\r\n                                        onClick={this.handleVisible}\r\n                                        value={this.state.title}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"dialog-note\">\r\n                                <InputBase\r\n                                    placeholder=\"Take a note ...\"\r\n                                    onChange={this.handleDescriptionChange}\r\n                                    value={this.state.description}\r\n                                    onClick={this.handleVisible}\r\n                                    multiline\r\n                                />\r\n                            </div>\r\n                                <div className=\"item-icons\">\r\n                                    <div className=\"items\">\r\n                                        {this.props.deleted === false ?\r\n                                            <Icon setColor={this.setColor} noteId={this.state.id}\r\n                                                  archived={this.props.archived} update={this.getNotes}\r\n                                                  userDetails={this.state.userDetails}\r\n                                            />\r\n                                            :\r\n                                            <div className=\"dialog-card-icon\">\r\n                                                <Tooltip title=\"Delete Forever\">\r\n                                                    <IconButton>\r\n                                                        <DeleteOutlinedIcon onClick={() => this.handleDeleteForever(this.state.id)}></DeleteOutlinedIcon>\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n\r\n                                                <Tooltip title=\"Restore\">\r\n                                                    <IconButton>\r\n                                                        <RestoreFromTrashOutlinedIcon onClick={() => this.handleRestore(this.state.id)}></RestoreFromTrashOutlinedIcon>\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n                                    <div className=\"close-container\">\r\n                                        {this.props.deleted === false ?\r\n                                            <button className=\"close-button\" onClick={this.handleClose}>Close</button>\r\n                                            :\r\n                                            \"\"\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                        </div>\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DisplayNotes;","C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Icon.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\DisplayArchivedNotes.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\DisplayTrashNotes.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\service\\UserAxiosService.jsx",[],"C:\\Users\\user\\FundooNotes\\fundoo-notes\\src\\component\\Label.jsx",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":3,"column":8,"nodeType":"105","messageId":"106","endLine":3,"endColumn":14},{"ruleId":"103","severity":1,"message":"107","line":4,"column":8,"nodeType":"105","messageId":"106","endLine":4,"endColumn":12},{"ruleId":"103","severity":1,"message":"108","line":7,"column":8,"nodeType":"105","messageId":"106","endLine":7,"endColumn":13},{"ruleId":"103","severity":1,"message":"109","line":36,"column":13,"nodeType":"105","messageId":"106","endLine":36,"endColumn":24},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'Avatar' is defined but never used.","Identifier","unusedVar","'Chip' is defined but never used.","'Label' is defined but never used.","'userDetails' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]